## Dubbo 服务提供者配置
spring.dubbo.application.name=order-command-side
spring.dubbo.registry.address=@spring.dubbo.registry.address@
spring.dubbo.protocol.name=dubbo
spring.dubbo.protocol.port=20900
spring.dubbo.scan=com.yunwoo.cybershop


#mong database
spring.data.mongodb.database=axon
spring.data.mongodb.uri=@spring.data.mongodb.uri@

#rabbitMq
mq.address=@mq.address@
mq.username=@mq.username@
mq.password=@mq.password@


#-----mysql start
db.driver=com.mysql.jdbc.Driver
db.url=@db.url@
db.quartz.url=@db.quartz.url@
db.username=@db.username@
db.password=@db.password@
db.initialSize=10
db.minIdle=10
db.maxActive=10
#<!-- 配置获取连接等待超时的时 -->
db.maxWait=60000
#<!-- 配置间隔多久才进行一次检测，关闭的空闲连接，单位是毫�? -->
db.timeBetweenEvictionRunsMillis=60000
#<!-- 配置连接在池中最小生存的时间，单位是毫秒 -->
db.minEvictableIdleTimeMillis=300000
#<!--用来�?��连接是否有效的sql，要求是查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用 -->
db.validationQuery=SELECT 'x'
#<!--testWhileIdle,建议配置为true，不影响性能，并且保证安全。申请连接的时�?�?��，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery连接是否有效 -->
db.testWhileIdle=true
#<!--testOnBorrow,申请连接时执行validationQuery连接是否有效，做了这个配置会降低性能 -->
db.testOnBorrow=false
#<!--testOnReturn,归还连接时执行validationQuery连接是否有效，做了这个配置会降低性能 -->
db.testOnReturn=false
#<!--是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库能提升巨大，比如说oracle。在mysql下建议关 -->
db.poolPreparedStatements=false
#<!--要启用PSCache，必须配置大，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大，比如说100 -->
db.maxOpenPreparedStatements=100
#-----mysql end
